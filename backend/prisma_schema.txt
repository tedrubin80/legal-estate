// Prisma Schema for Legal Estate Case Management System
// This schema supports all frontend functionality built

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(ATTORNEY)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User's assigned cases
  assignedCases    CaseAssignment[]
  createdCases     Case[]           @relation("CreatedBy")
  createdTasks     CaseTask[]       @relation("CreatedBy")
  assignedTasks    CaseTask[]       @relation("AssignedTo")
  createdNotes     CaseNote[]
  uploadedDocuments Document[]

  @@map("users")
}

enum UserRole {
  ADMIN
  ATTORNEY
  PARALEGAL
  ASSISTANT
  INVESTIGATOR
  CASE_MANAGER
}

// ============================================================================
// CLIENT & CASE MANAGEMENT
// ============================================================================

model Client {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  middleName  String?
  dateOfBirth DateTime?
  ssn         String?
  gender      Gender?
  maritalStatus MaritalStatus?
  citizenship String?
  languages   String[] // JSON array of languages
  photo       String?  // URL to photo file
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Contact Information
  contacts ContactInfo[]

  // Cases for this client
  cases               Case[]
  emergencyContacts   EmergencyContact[]
  familyMembers       FamilyMember[]
  employment          Employment?
  communicationPrefs  CommunicationPreferences?

  @@map("clients")
}

model ContactInfo {
  id      String      @id @default(cuid())
  type    ContactType
  value   String
  label   String?     // "Home", "Work", "Mobile", etc.
  primary Boolean     @default(false)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("contact_info")
}

model Address {
  id          String  @id @default(cuid())
  street      String
  city        String
  state       String
  zipCode     String
  country     String  @default("United States")
  type        AddressType
  primary     Boolean @default(false)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Case {
  id              String     @id @default(cuid())
  caseNumber      String     @unique
  title           String
  caseType        CaseType
  dateOfLoss      DateTime?
  status          CaseStatus @default(ACTIVE)
  description     String?
  referralSource  String?
  referralName    String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relationships
  clientId  String
  client    Client @relation(fields: [clientId], references: [id])
  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])

  // Case data
  assignments      CaseAssignment[]
  tasks            CaseTask[]
  notes            CaseNote[]
  documents        Document[]
  medicalProviders MedicalProvider[]
  medicalRecords   MedicalRecord[]
  injuries         Injury[]
  incident         Incident?
  vehicles         Vehicle[]
  witnesses        Witness[]
  evidence         Evidence[]
  insurancePolicies InsurancePolicy[]
  settlements      Settlement[]
  liens            Lien[]

  @@map("cases")
}

model CaseAssignment {
  id   String @id @default(cuid())
  role String // "Primary Attorney", "Case Manager", etc.

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  assignedAt DateTime @default(now())

  @@unique([caseId, userId, role])
  @@map("case_assignments")
}

// ============================================================================
// PERSONAL INFORMATION
// ============================================================================

model EmergencyContact {
  id           String  @id @default(cuid())
  name         String
  relationship String
  phone        String
  email        String?
  address      String?
  isPrimary    Boolean @default(false)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model FamilyMember {
  id              String  @id @default(cuid())
  name            String
  relationship    String
  dateOfBirth     DateTime?
  livesWithClient Boolean @default(false)
  occupation      String?
  employer        String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("family_members")
}

model Employment {
  id             String    @id @default(cuid())
  currentlyEmployed Boolean @default(false)
  employer       String?
  jobTitle       String?
  workAddress    String?
  supervisor     String?
  startDate      DateTime?
  endDate        DateTime?
  salary         Decimal?
  hoursPerWeek   Int?
  benefits       String[]  // JSON array
  workPhone      String?
  missedWork     Boolean   @default(false)
  missedWorkDays Int?

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("employment")
}

model CommunicationPreferences {
  id                    String @id @default(cuid())
  preferredMethod       PreferredContactMethod @default(EMAIL)
  bestTimeToContact     String?
  communicationNotes    String?
  accessibilityNeeds    String?
  interpreterNeeded     Boolean @default(false)
  preferredLanguage     String  @default("English")

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("communication_preferences")
}

// ============================================================================
// MEDICAL INFORMATION
// ============================================================================

model MedicalProvider {
  id             String @id @default(cuid())
  name           String
  type           String // "Emergency Room", "Orthopedic Surgeon", etc.
  phone          String?
  email          String?
  address        String?
  dateFirstSeen  DateTime?
  dateLastSeen   DateTime?
  totalBills     Decimal  @default(0)
  status         ProviderStatus @default(ACTIVE)

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  medicalRecords MedicalRecord[]

  @@map("medical_providers")
}

model MedicalRecord {
  id              String   @id @default(cuid())
  date            DateTime
  type            String   // "Emergency Visit", "Surgery", "Physical Therapy"
  description     String
  cost            Decimal  @default(0)
  billReceived    Boolean  @default(false)
  recordsReceived Boolean  @default(false)
  category        String?  // "Investigation", "Treatment", etc.

  caseId     String
  case       Case            @relation(fields: [caseId], references: [id], onDelete: Cascade)
  providerId String?
  provider   MedicalProvider? @relation(fields: [providerId], references: [id])

  @@map("medical_records")
}

model Injury {
  id            String        @id @default(cuid())
  bodyPart      String
  description   String
  severity      InjurySeverity
  dateReported  DateTime
  currentStatus String
  resolved      Boolean       @default(false)

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("injuries")
}

// ============================================================================
// INCIDENT INFORMATION
// ============================================================================

model Incident {
  id               String    @id @default(cuid())
  dateOfLoss       DateTime
  timeOfIncident   String?
  location         String
  city             String
  state            String
  zipCode          String
  coordinates      String?
  weather          String?
  lightingConditions String?
  roadConditions   String?
  incidentType     String
  subType          String?
  severity         InjurySeverity
  description      String
  causeFactors     String[]  // JSON array of contributing factors

  caseId String @unique
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  policeReport PoliceReport?

  @@map("incidents")
}

model Vehicle {
  id              String @id @default(cuid())
  year            String
  make            String
  model           String
  color           String
  licensePlate    String?
  vin             String?
  owner           String
  driver          String
  passengers      String[] // JSON array
  insuranceCompany String?
  policyNumber    String?
  damages         String?
  towedTo         String?
  isClientVehicle Boolean  @default(false)

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("vehicles")
}

model PoliceReport {
  id               String @id @default(cuid())
  reportFiled      Boolean @default(false)
  reportNumber     String?
  respondingOfficer String?
  policeStation    String?
  reportDate       DateTime?

  incidentId String @unique
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  citations Citation[]

  @@map("police_reports")
}

model Citation {
  id          String  @id @default(cuid())
  driver      String
  citation    String
  amount      Decimal
  description String?

  policeReportId String
  policeReport   PoliceReport @relation(fields: [policeReportId], references: [id], onDelete: Cascade)

  @@map("citations")
}

model Witness {
  id           String @id @default(cuid())
  name         String
  phone        String
  email        String?
  address      String?
  relationship String // "Independent Witness", "Business Owner", etc.
  statement    String

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("witnesses")
}

model Evidence {
  id            String        @id @default(cuid())
  type          EvidenceType
  description   String
  location      String
  collectedBy   String
  dateCollected DateTime
  status        EvidenceStatus @default(COLLECTED)
  filePath      String?       // Path to uploaded file

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("evidence")
}

// ============================================================================
// INSURANCE INFORMATION
// ============================================================================

model InsurancePolicy {
  id             String         @id @default(cuid())
  type           InsuranceType
  company        String
  policyNumber   String
  policyHolder   String
  effectiveDate  DateTime
  expirationDate DateTime
  premium        Decimal
  deductible     Decimal        @default(0)
  status         PolicyStatus   @default(ACTIVE)
  
  // Coverage limits (stored as JSON)
  coverageLimits Json

  // Agent information
  agentName     String?
  agentPhone    String?
  agentEmail    String?

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  claims InsuranceClaim[]

  @@map("insurance_policies")
}

model InsuranceClaim {
  id            String      @id @default(cuid())
  claimNumber   String      @unique
  dateReported  DateTime
  status        ClaimStatus @default(OPEN)
  amount        Decimal
  description   String
  adjusterName  String?
  adjusterPhone String?

  policyId String
  policy   InsurancePolicy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@map("insurance_claims")
}

// ============================================================================
// CASE MANAGEMENT
// ============================================================================

model CaseTask {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  caseId      String
  case        Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])
  assignedToId String?
  assignedTo  User?  @relation("AssignedTo", fields: [assignedToId], references: [id])

  @@map("case_tasks")
}

model CaseNote {
  id        String   @id @default(cuid())
  title     String?
  content   String
  type      NoteType @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  caseId   String
  case     Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  @@map("case_notes")
}

model Document {
  id          String       @id @default(cuid())
  name        String
  type        DocumentType
  category    String?
  filePath    String
  fileSize    Int
  mimeType    String
  description String?
  uploadedAt  DateTime     @default(now())

  caseId     String
  case       Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy User   @relation(fields: [uploadedById], references: [id])

  @@map("documents")
}

// ============================================================================
// SETTLEMENTS & LIENS
// ============================================================================

model Settlement {
  id              String           @id @default(cuid())
  type            SettlementType
  amount          Decimal
  date            DateTime?
  status          SettlementStatus @default(NEGOTIATING)
  description     String?
  attorneyFees    Decimal          @default(0)
  costs           Decimal          @default(0)
  netToClient     Decimal          @default(0)

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("settlements")
}

model Lien {
  id          String   @id @default(cuid())
  type        LienType
  creditor    String
  amount      Decimal
  description String?
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("liens")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

enum ContactType {
  PHONE
  EMAIL
  MOBILE
  WORK_PHONE
  FAX
}

enum AddressType {
  HOME
  WORK
  MAILING
  BILLING
}

enum CaseType {
  PERSONAL_INJURY
  AUTO_ACCIDENT
  SLIP_AND_FALL
  MEDICAL_MALPRACTICE
  WORKERS_COMPENSATION
  PRODUCT_LIABILITY
  WRONGFUL_DEATH
  OTHER
}

enum CaseStatus {
  ACTIVE
  PENDING
  SETTLED
  CLOSED
  ARCHIVED
}

enum PreferredContactMethod {
  PHONE
  EMAIL
  TEXT
  MAIL
}

enum ProviderStatus {
  ACTIVE
  COMPLETED
  PENDING
  INACTIVE
}

enum InjurySeverity {
  MINOR
  MODERATE
  SEVERE
  CRITICAL
}

enum EvidenceType {
  PHOTO
  VIDEO
  DOCUMENT
  PHYSICAL_EVIDENCE
  AUDIO
}

enum EvidenceStatus {
  COLLECTED
  PENDING
  NOT_AVAILABLE
  DESTROYED
}

enum InsuranceType {
  AUTO
  HEALTH
  LIABILITY
  UMBRELLA
  WORKERS_COMP
  PROPERTY
  OTHER
}

enum PolicyStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum ClaimStatus {
  OPEN
  CLOSED
  PENDING
  DENIED
  SETTLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NoteType {
  GENERAL
  PHONE_CALL
  MEETING
  EMAIL
  INTERNAL
  CLIENT_COMMUNICATION
}

enum DocumentType {
  MEDICAL_RECORD
  POLICE_REPORT
  INSURANCE_DOCUMENT
  PHOTO
  VIDEO
  CORRESPONDENCE
  LEGAL_DOCUMENT
  EVIDENCE
  OTHER
}

enum SettlementType {
  DEMAND
  OFFER
  MEDIATION
  ARBITRATION
  TRIAL
  FINAL
}

enum SettlementStatus {
  NEGOTIATING
  PENDING_APPROVAL
  ACCEPTED
  REJECTED
  FINALIZED
}

enum LienType {
  MEDICAL
  ATTORNEY
  HOSPITAL
  SUBROGATION
  WORKERS_COMP
  MEDICARE
  MEDICAID
  OTHER
}