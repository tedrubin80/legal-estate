# .github/workflows/organize-repo.yml
name: 🗂️ Repository Organizer & Structure Validator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  organize-structure:
    name: 🏗️ Organize Repository Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: 📁 Create Standard Directory Structure
      run: |
        echo "🏗️ Creating standard directory structure..."
        
        # Core directories
        mkdir -p {backend,frontend,scripts,docs,tests,.github/workflows}
        mkdir -p backend/{src,dist,prisma,tests}
        mkdir -p backend/src/{controllers,middleware,routes,utils,types}
        mkdir -p frontend/{src,public,build}
        mkdir -p frontend/src/{components,services,types,utils,styles}
        mkdir -p docs/{api,user-guide,development,deployment}
        mkdir -p scripts/{deployment,database,development,maintenance}
        mkdir -p tests/{integration,e2e,fixtures}
        
        echo "✅ Directory structure created"
    
    - name: 🔧 Organize Misplaced Files
      run: |
        echo "🔧 Organizing misplaced files..."
        
        # Move deployment scripts to proper location
        find . -name "deploy*.sh" -not -path "./scripts/*" -exec mv {} scripts/deployment/ \; 2>/dev/null || true
        find . -name "*deploy*.sh" -not -path "./scripts/*" -exec mv {} scripts/deployment/ \; 2>/dev/null || true
        
        # Move database scripts
        find . -name "*prisma*.sh" -not -path "./scripts/*" -exec mv {} scripts/database/ \; 2>/dev/null || true
        find . -name "*neon*.sh" -not -path "./scripts/*" -exec mv {} scripts/database/ \; 2>/dev/null || true
        find . -name "*schema*.sh" -not -path "./scripts/*" -exec mv {} scripts/database/ \; 2>/dev/null || true
        
        # Move setup and installation scripts
        find . -name "setup*.sh" -not -path "./scripts/*" -exec mv {} scripts/development/ \; 2>/dev/null || true
        find . -name "install*.sh" -not -path "./scripts/*" -exec mv {} scripts/development/ \; 2>/dev/null || true
        find . -name "*install*.sh" -not -path "./scripts/*" -exec mv {} scripts/development/ \; 2>/dev/null || true
        
        # Move maintenance scripts
        find . -name "*backup*.sh" -not -path "./scripts/*" -exec mv {} scripts/maintenance/ \; 2>/dev/null || true
        find . -name "*restore*.sh" -not -path "./scripts/*" -exec mv {} scripts/maintenance/ \; 2>/dev/null || true
        find . -name "*health*.sh" -not -path "./scripts/*" -exec mv {} scripts/maintenance/ \; 2>/dev/null || true
        find . -name "*update*.sh" -not -path "./scripts/*" -exec mv {} scripts/maintenance/ \; 2>/dev/null || true
        
        # Move documentation files
        find . -name "*.md" -not -path "./docs/*" -not -name "README.md" -not -name "LICENSE.md" -exec mv {} docs/ \; 2>/dev/null || true
        
        echo "✅ Files organized"
    
    - name: 🔐 Set Proper File Permissions
      run: |
        echo "🔐 Setting file permissions..."
        
        # Make all scripts executable
        find scripts -name "*.sh" -type f -exec chmod +x {} \;
        
        # Ensure proper permissions for directories
        find . -type d -exec chmod 755 {} \;
        find . -type f -not -name "*.sh" -exec chmod 644 {} \;
        
        echo "✅ Permissions set"
    
    - name: 📝 Create Missing Essential Files
      run: |
        echo "📝 Creating missing essential files..."
        
        # Create root package.json if missing
        if [[ ! -f "package.json" ]]; then
          cat > package.json << 'EOF'
        {
          "name": "legal-estate",
          "version": "1.0.0",
          "description": "Legal Practice Management Software",
          "private": true,
          "scripts": {
            "setup": "./scripts/development/setup.sh",
            "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
            "dev:backend": "cd backend && npm run dev",
            "dev:frontend": "cd frontend && npm start",
            "build": "npm run build:backend && npm run build:frontend",
            "build:backend": "cd backend && npm run build",
            "build:frontend": "cd frontend && npm run build",
            "deploy": "./scripts/deployment/deploy.sh",
            "test": "npm run test:backend && npm run test:frontend",
            "test:backend": "cd backend && npm test",
            "test:frontend": "cd frontend && npm test"
          },
          "devDependencies": {
            "concurrently": "^7.6.0"
          }
        }
        EOF
          echo "✅ Created package.json"
        fi
        
        # Create docker-compose.yml if missing
        if [[ ! -f "docker-compose.yml" ]]; then
          cat > docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          backend:
            build:
              context: .
              dockerfile: Dockerfile.backend
            container_name: legal-estate-backend
            ports:
              - "3001:3000"
            environment:
              DATABASE_URL: ${DATABASE_URL:-postgresql://neondb_owner:npg_VWySqE6HnUm9@ep-fancy-tooth-a5z610oe-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require}
              JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
              JWT_EXPIRES_IN: "24h"
              NODE_ENV: "production"
              PORT: "3000"
              FRONTEND_URL: "http://localhost:3000"
            volumes:
              - ./backend:/app
              - /app/node_modules
              - /app/dist
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          frontend:
            build:
              context: .
              dockerfile: Dockerfile.frontend
            container_name: legal-estate-frontend
            ports:
              - "3000:3000"
            environment:
              REACT_APP_API_URL: "http://localhost:3001"
              REACT_APP_NAME: "Legal Estate Management"
              REACT_APP_VERSION: "1.0.0"
            depends_on:
              - backend
            volumes:
              - ./frontend:/app
              - /app/node_modules
              - /app/build
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3000"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        EOF
          echo "✅ Created docker-compose.yml"
        fi
        
        # Create Dockerfile.backend if missing
        if [[ ! -f "Dockerfile.backend" ]]; then
          cat > Dockerfile.backend << 'EOF'
        FROM node:18-alpine
        
        WORKDIR /app
        
        # Copy package files
        COPY backend/package*.json ./
        
        # Install dependencies
        RUN npm ci --only=production
        
        # Copy source code
        COPY backend .
        
        # Generate Prisma client
        RUN npx prisma generate
        
        # Build TypeScript
        RUN npm run build
        
        # Expose port
        EXPOSE 3000
        
        # Start server
        CMD ["npm", "start"]
        EOF
          echo "✅ Created Dockerfile.backend"
        fi
        
        # Create Dockerfile.frontend if missing
        if [[ ! -f "Dockerfile.frontend" ]]; then
          cat > Dockerfile.frontend << 'EOF'
        FROM node:18-alpine
        
        WORKDIR /app
        
        # Copy package files
        COPY frontend/package*.json ./
        
        # Install dependencies
        RUN npm ci --only=production
        
        # Copy application files
        COPY frontend .
        
        # Build the application
        RUN npm run build
        
        # Install serve to run the app
        RUN npm install -g serve
        
        # Expose port
        EXPOSE 3000
        
        # Start the application
        CMD ["serve", "-s", "build", "-l", "3000"]
        EOF
          echo "✅ Created Dockerfile.frontend"
        fi
        
        # Create README.md if missing
        if [[ ! -f "README.md" ]]; then
          cat > README.md << 'EOF'
        # Legal Estate Management System
        
        > Modern, secure legal practice management software for law firms of all sizes
        
        [![Deploy](https://github.com/tedrubin80/legal-estate/actions/workflows/organize-repo.yml/badge.svg)](https://github.com/tedrubin80/legal-estate/actions/workflows/organize-repo.yml)
        
        ## 🚀 Features
        
        - **Client Management**: Comprehensive client profiles and contact tracking
        - **Case Management**: Full case lifecycle management with status tracking
        - **Document Management**: Secure document storage with version control
        - **Time Tracking**: Detailed time entry and billing management
        - **Task Management**: Assignment and deadline tracking
        - **Secure Access**: Role-based permissions and audit trails
        
        ## 🛠️ Tech Stack
        
        - **Backend**: Node.js, Express, TypeScript, Prisma
        - **Frontend**: React, TypeScript, React Query
        - **Database**: PostgreSQL (Neon)
        - **Infrastructure**: Docker, GitHub Actions
        
        ## 📋 Prerequisites
        
        - Node.js 18+
        - Docker (optional)
        - PostgreSQL database (using Neon cloud)
        
        ## 🚀 Quick Start
        
        ### Using Docker (Recommended)
        
        ```bash
        # Clone the repository
        git clone https://github.com/tedrubin80/legal-estate.git
        cd legal-estate
        
        # Deploy with Docker
        docker-compose up --build
        ```
        
        ### Manual Setup
        
        ```bash
        # Run the setup script
        ./scripts/development/setup.sh
        
        # Or manually:
        cd backend && npm install
        cd ../frontend && npm install
        ```
        
        ## 📖 Documentation
        
        - [API Documentation](docs/api/)
        - [User Guide](docs/user-guide/)
        - [Development Setup](docs/development/)
        - [Deployment Guide](docs/deployment/)
        
        ## 🤝 Contributing
        
        Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct.
        
        ## 📄 License
        
        This project is licensed under the MIT License.
        EOF
          echo "✅ Created README.md"
        fi
        
        # Create .gitignore if missing
        if [[ ! -f ".gitignore" ]]; then
          cat > .gitignore << 'EOF'
        # Dependencies
        node_modules/
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        lerna-debug.log*
        
        # Production
        build/
        dist/
        
        # Environment files
        .env
        .env.local
        .env.development.local
        .env.test.local
        .env.production.local
        
        # IDE
        .vscode/
        .idea/
        *.swp
        *.swo
        .DS_Store
        
        # Testing
        coverage/
        .nyc_output/
        
        # Logs
        logs/
        *.log
        
        # Database
        *.sqlite
        *.db
        
        # Temporary files
        tmp/
        temp/
        
        # OS files
        Thumbs.db
        EOF
          echo "✅ Created .gitignore"
        fi
        
        # Create backend/prisma/schema.prisma if missing
        if [[ ! -f "backend/prisma/schema.prisma" ]]; then
          mkdir -p backend/prisma
          cat > backend/prisma/schema.prisma << 'EOF'
        generator client {
          provider = "prisma-client-js"
        }
        
        datasource db {
          provider = "postgresql"
          url      = env("DATABASE_URL")
        }
        
        model User {
          id               String         @id @default(cuid())
          email            String         @unique
          password         String
          firstName        String
          lastName         String
          role             UserRole       @default(PARALEGAL)
          isActive         Boolean        @default(true)
          createdAt        DateTime       @default(now())
          updatedAt        DateTime       @updatedAt
          lastLogin        DateTime?
          
          clients          Client[]       @relation("AttorneyClients")
          casesAsAttorney  Case[]         @relation("CaseAttorney")
          casesAsParalegal Case[]         @relation("CaseParalegal")
          tasks            Task[]
          timeEntries      TimeEntry[]
          documents        Document[]
          activities       Activity[]
          
          @@index([email])
          @@index([role])
        }
        
        model Client {
          id               String         @id @default(cuid())
          firstName        String
          lastName         String
          email            String?
          phone            String?
          address          String?
          dateOfBirth      DateTime?
          notes            String?
          attorney         User           @relation("AttorneyClients", fields: [attorneyId], references: [id])
          attorneyId       String
          createdAt        DateTime       @default(now())
          updatedAt        DateTime       @updatedAt
          
          cases            Case[]
          documents        Document[]
          
          @@index([attorneyId])
          @@index([lastName, firstName])
        }
        
        model Case {
          id               String         @id @default(cuid())
          caseNumber       String         @unique
          title            String
          description      String?
          type             CaseType
          status           CaseStatus     @default(OPEN)
          priority         Priority       @default(MEDIUM)
          client           Client         @relation(fields: [clientId], references: [id])
          clientId         String
          attorney         User           @relation("CaseAttorney", fields: [attorneyId], references: [id])
          attorneyId       String
          paralegal        User?          @relation("CaseParalegal", fields: [paralegalId], references: [id])
          paralegalId      String?
          openedDate       DateTime       @default(now())
          closedDate       DateTime?
          deadlineDate     DateTime?
          createdAt        DateTime       @default(now())
          updatedAt        DateTime       @updatedAt
          
          tasks            Task[]
          documents        Document[]
          timeEntries      TimeEntry[]
          activities       Activity[]
          
          @@index([caseNumber])
          @@index([clientId])
          @@index([attorneyId])
          @@index([status])
        }
        
        model Task {
          id               String         @id @default(cuid())
          title            String
          description      String?
          status           TaskStatus     @default(PENDING)
          priority         Priority       @default(MEDIUM)
          dueDate          DateTime?
          completedDate    DateTime?
          assignedTo       User           @relation(fields: [assignedToId], references: [id])
          assignedToId     String
          case             Case           @relation(fields: [caseId], references: [id])
          caseId           String
          createdAt        DateTime       @default(now())
          updatedAt        DateTime       @updatedAt
          
          @@index([assignedToId])
          @@index([caseId])
          @@index([status])
          @@index([dueDate])
        }
        
        model Document {
          id               String         @id @default(cuid())
          title            String
          description      String?
          fileName         String
          fileUrl          String
          fileSize         Int
          mimeType         String
          case             Case?          @relation(fields: [caseId], references: [id])
          caseId           String?
          client           Client?        @relation(fields: [clientId], references: [id])
          clientId         String?
          uploadedBy       User           @relation(fields: [uploadedById], references: [id])
          uploadedById     String
          createdAt        DateTime       @default(now())
          updatedAt        DateTime       @updatedAt
          
          @@index([caseId])
          @@index([clientId])
          @@index([uploadedById])
        }
        
        model TimeEntry {
          id               String         @id @default(cuid())
          description      String
          hours            Float
          rate             Float
          date             DateTime
          billable         Boolean        @default(true)
          billed           Boolean        @default(false)
          user             User           @relation(fields: [userId], references: [id])
          userId           String
          case             Case           @relation(fields: [caseId], references: [id])
          caseId           String
          createdAt        DateTime       @default(now())
          updatedAt        DateTime       @updatedAt
          
          @@index([userId])
          @@index([caseId])
          @@index([date])
          @@index([billed])
        }
        
        model Activity {
          id               String         @id @default(cuid())
          type             ActivityType
          description      String
          metadata         Json?
          user             User           @relation(fields: [userId], references: [id])
          userId           String
          case             Case?          @relation(fields: [caseId], references: [id])
          caseId           String?
          ipAddress        String?
          userAgent        String?
          createdAt        DateTime       @default(now())
          
          @@index([userId])
          @@index([caseId])
          @@index([type])
          @@index([createdAt])
        }
        
        enum UserRole {
          ADMIN
          ATTORNEY
          PARALEGAL
          SECRETARY
        }
        
        enum CaseType {
          CRIMINAL
          CIVIL
          FAMILY
          CORPORATE
          REAL_ESTATE
          IMMIGRATION
          BANKRUPTCY
          PERSONAL_INJURY
          OTHER
        }
        
        enum CaseStatus {
          OPEN
          IN_PROGRESS
          ON_HOLD
          CLOSED
          ARCHIVED
        }
        
        enum TaskStatus {
          PENDING
          IN_PROGRESS
          COMPLETED
          CANCELLED
        }
        
        enum Priority {
          LOW
          MEDIUM
          HIGH
          URGENT
        }
        
        enum ActivityType {
          USER_LOGIN
          USER_LOGOUT
          CASE_CREATED
          CASE_UPDATED
          CASE_CLOSED
          CLIENT_CREATED
          CLIENT_UPDATED
          DOCUMENT_UPLOADED
          DOCUMENT_DOWNLOADED
          TASK_CREATED
          TASK_COMPLETED
          TIME_ENTRY_CREATED
        }
        EOF
          echo "✅ Created backend/prisma/schema.prisma"
        fi
        
        # Create backend/.env.example if missing
        if [[ ! -f "backend/.env.example" ]]; then
          cat > backend/.env.example << 'EOF'
        # Database Configuration
        DATABASE_URL="postgresql://user:password@host:port/database?sslmode=require"
        
        # JWT Configuration
        JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"
        JWT_EXPIRES_IN="24h"
        
        # Server Configuration
        PORT=3000
        NODE_ENV="development"
        
        # Frontend URL (for CORS)
        FRONTEND_URL="http://localhost:3000"
        
        # Email Configuration (optional)
        SMTP_HOST=""
        SMTP_PORT=""
        SMTP_USER=""
        SMTP_PASS=""
        EOF
          echo "✅ Created backend/.env.example"
        fi
        
        echo "✅ All essential files created or verified"
    
    - name: 📝 Fix Environment Files
      run: |
        echo "📝 Fixing environment files..."
        
        # Fix backend environment files
        if [[ -f "backend_env.ev" ]]; then
          mv backend_env.ev backend/.env
          echo "✅ Moved backend_env.ev to backend/.env"
        fi
        
        if [[ -f "neon_env_config.env" ]] && [[ ! -f "backend/.env" ]]; then
          mv neon_env_config.env backend/.env
          echo "✅ Moved neon_env_config.env to backend/.env"
        fi
        
        # Fix Prisma schema location
        if [[ -f "prisma_schema.prisma" ]]; then
          mkdir -p backend/prisma
          mv prisma_schema.prisma backend/prisma/schema.prisma
          echo "✅ Moved prisma_schema.prisma to correct location"
        fi
        
        echo "✅ Environment files fixed"
    
    - name: 🏷️ Create Scripts Index
      run: |
        echo "🏷️ Creating scripts documentation..."
        
        cat > scripts/README.md << 'EOF'
        # Scripts Directory
        
        This directory contains all automation scripts for the Legal Estate project.
        
        ## Directory Structure
        
        - **deployment/** - Scripts for deploying the application
        - **database/** - Database management and migration scripts
        - **development/** - Development setup and utility scripts
        - **maintenance/** - System maintenance and backup scripts
        
        ## Usage
        
        All scripts should be run from the project root directory:
        
        ```bash
        ./scripts/deployment/deploy.sh
        ./scripts/database/migrate.sh
        ./scripts/development/setup.sh
        ./scripts/maintenance/backup.sh
        ```
        
        ## Script Permissions
        
        All scripts in this directory are automatically made executable by the GitHub Action workflow.
        EOF
        
        echo "✅ Scripts documentation created"
    
    - name: 🗺️ Generate Project Structure Map
      run: |
        echo "🗺️ Generating project structure documentation..."
        
        cat > PROJECT_STRUCTURE.md << 'EOF'
        # Project Structure
        
        ```
        legal-estate/
        ├── 📁 backend/                    # Backend API (Node.js + TypeScript)
        │   ├── 📁 src/
        │   │   ├── 📁 controllers/        # API route controllers
        │   │   ├── 📁 middleware/         # Express middleware
        │   │   ├── 📁 routes/             # API routes
        │   │   ├── 📁 utils/              # Utility functions
        │   │   ├── 📁 types/              # TypeScript type definitions
        │   │   ├── 📄 app.ts               # Express app configuration
        │   │   └── 📄 server.ts            # Server entry point
        │   ├── 📁 prisma/                 # Database schema & migrations
        │   │   └── 📄 schema.prisma        # Prisma schema
        │   ├── 📁 tests/                  # Backend tests
        │   ├── 📄 package.json             # Backend dependencies
        │   ├── 📄 tsconfig.json           # TypeScript configuration
        │   └── 📄 .env                     # Environment variables
        │
        ├── 📁 frontend/                   # Frontend React App
        │   ├── 📁 src/
        │   │   ├── 📁 components/         # React components
        │   │   ├── 📁 services/           # API services
        │   │   ├── 📁 types/              # TypeScript types
        │   │   ├── 📁 utils/              # Utility functions
        │   │   ├── 📁 styles/             # CSS/styling
        │   │   ├── 📄 App.tsx              # Main App component
        │   │   └── 📄 index.tsx            # React entry point
        │   ├── 📁 public/                 # Static assets
        │   ├── 📄 package.json             # Frontend dependencies
        │   └── 📄 tsconfig.json           # TypeScript configuration
        │
        ├── 📁 scripts/                   # Automation scripts
        │   ├── 📁 deployment/            # Deployment scripts
        │   ├── 📁 database/              # Database scripts
        │   ├── 📁 development/           # Development scripts
        │   ├── 📁 maintenance/           # Maintenance scripts
        │   └── 📄 README.md               # Scripts documentation
        │
        ├── 📁 docs/                      # Documentation
        │   ├── 📁 api/                   # API documentation
        │   ├── 📁 user-guide/            # User guides
        │   ├── 📁 development/           # Development docs
        │   └── 📁 deployment/            # Deployment guides
        │
        ├── 📁 tests/                     # Integration & E2E tests
        │   ├── 📁 integration/           # Integration tests
        │   ├── 📁 e2e/                   # End-to-end tests
        │   └── 📁 fixtures/              # Test data
        │
        ├── 📁 .github/                   # GitHub configuration
        │   ├── 📁 workflows/             # GitHub Actions
        │   ├── 📁 actions/               # Custom actions
        │   └── 📁 ISSUE_TEMPLATE/        # Issue templates
        │
        ├── 📄 docker-compose.yml          # Docker services configuration
        ├── 📄 Dockerfile.backend          # Backend Docker image
        ├── 📄 Dockerfile.frontend         # Frontend Docker image
        ├── 📄 README.md                    # Project overview
        ├── 📄 .gitignore                   # Git ignore rules
        └── 📄 PROJECT_STRUCTURE.md        # This file
        ```
        
        ## Quick Start
        
        1. **Setup**: `./scripts/development/setup.sh`
        2. **Deploy**: `./scripts/deployment/deploy.sh`
        3. **Access**: http://localhost:3000
        
        ## Key Technologies
        
        - **Backend**: Node.js, Express, TypeScript, Prisma
        - **Frontend**: React, TypeScript, React Query
        - **Database**: PostgreSQL (Neon)
        - **Infrastructure**: Docker, GitHub Actions
        - **Security**: JWT, bcrypt, Helmet, CORS
        EOF
        
        echo "✅ Project structure map generated"
    
    - name: 🧹 Clean Up Duplicate Files
      run: |
        echo "🧹 Cleaning up duplicate files..."
        
        # Remove duplicate Dockerfiles in wrong locations
        find . -name "Dockerfile*" -not -path "./*Dockerfile.backend" -not -path "./*Dockerfile.frontend" -delete 2>/dev/null || true
        
        # Remove duplicate package.json files in wrong locations
        find . -name "package.json" -not -path "./backend/*" -not -path "./frontend/*" -not -path "./package.json" -delete 2>/dev/null || true
        
        # Remove duplicate env files
        find . -name ".env*" -not -path "./backend/*" -not -path "./frontend/*" -delete 2>/dev/null || true
        
        # Remove backup files
        find . -name "*.backup" -delete 2>/dev/null || true
        find . -name "*~" -delete 2>/dev/null || true
        
        echo "✅ Cleanup completed"
    
    - name: 📊 Generate Repository Report
      run: |
        echo "📊 Generating repository report..."
        
        cat > REPO_REPORT.md << EOF
        # Repository Organization Report
        
        **Generated on:** $(date)
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        
        ## 📈 Repository Statistics
        
        - **Total Files:** $(find . -type f | wc -l)
        - **Script Files:** $(find . -name "*.sh" | wc -l)
        - **TypeScript Files:** $(find . -name "*.ts" -o -name "*.tsx" | wc -l)
        - **Documentation Files:** $(find . -name "*.md" | wc -l)
        
        ## 📁 Directory Structure
        
        \`\`\`
        $(tree -d -L 3 2>/dev/null || find . -type d | head -20 | sed 's/[^-][^\/]*\//  /g;s/^  //;s/-/|/')
        \`\`\`
        
        ## 🔧 Scripts Inventory
        
        ### Deployment Scripts
        $(find scripts/deployment -name "*.sh" 2>/dev/null | sed 's/^/- /' || echo "- No deployment scripts found")
        
        ### Database Scripts  
        $(find scripts/database -name "*.sh" 2>/dev/null | sed 's/^/- /' || echo "- No database scripts found")
        
        ### Development Scripts
        $(find scripts/development -name "*.sh" 2>/dev/null | sed 's/^/- /' || echo "- No development scripts found")
        
        ### Maintenance Scripts
        $(find scripts/maintenance -name "*.sh" 2>/dev/null | sed 's/^/- /' || echo "- No maintenance scripts found")
        
        ## ✅ Validation Results
        
        - **Structure:** ✅ Organized
        - **Permissions:** ✅ Set correctly
        - **Essential Files:** ✅ Present
        - **Documentation:** ✅ Generated
        
        ## 🎯 Next Steps
        
        1. Review the organized structure
        2. Update any hardcoded paths in scripts
        3. Test the deployment process
        4. Update documentation as needed
        
        ---
        *This report was generated automatically by the Repository Organizer action.*
        EOF
        
        echo "✅ Repository report generated"
    
    - name: 💾 Commit Changes (if any)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if [[ -n $(git status --porcelain) ]]; then
          echo "📝 Changes detected, committing..."
          git add .
          git commit -m "🗂️ Auto-organize repository structure
          
          - Organized files into proper directories
          - Set correct file permissions  
          - Generated documentation
          - Created project structure map
          - Cleaned up duplicate files
          
          Generated by: Repository Organizer Action"
          
          echo "✅ Changes committed"
        else
          echo "ℹ️ No changes to commit"
        fi
    
    - name: 📤 Push Changes
      if: github.event_name != 'pull_request'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
    
    - name: 💬 Create Summary
      run: |
        echo "## 🗂️ Repository Organization Complete! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Tasks Completed:" >> $GITHUB_STEP_SUMMARY
        echo "- 📁 Created standard directory structure" >> $GITHUB_STEP_SUMMARY
        echo "- 🔧 Organized misplaced files" >> $GITHUB_STEP_SUMMARY
        echo "- 🔐 Set proper file permissions" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Created missing essential files" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ Created scripts index" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Generated project structure map" >> $GITHUB_STEP_SUMMARY
        echo "- 🧹 Cleaned up duplicate files" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Generated repository report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Repository Stats:" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Files:** $(find . -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Scripts:** $(find . -name "*.sh" | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **TypeScript Files:** $(find . -name "*.ts" -o -name "*.tsx" | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 What's Next:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the new `PROJECT_STRUCTURE.md` file" >> $GITHUB_STEP_SUMMARY
        echo "2. Check the `scripts/README.md` for script usage" >> $GITHUB_STEP_SUMMARY
        echo "3. Run `./scripts/development/setup.sh` on new machines" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy with `./scripts/deployment/deploy.sh`" >> $GITHUB_STEP_SUMMARY